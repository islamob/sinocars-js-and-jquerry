<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Algeria Car Pool - P2P Shipping Platform</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #e0e7ff 0%, #f3e8ff 100%);
            min-height: 100vh;
        }

        /* Header */
        header {
            background: white;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            padding: 1rem 2rem;
            position: sticky;
            top: 0;
            z-index: 1000;
        }

        .header-container {
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .logo-icon {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, #2563eb 0%, #4f46e5 100%);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 1.2rem;
        }

        .logo h1 {
            font-size: 1.5rem;
            color: #1e293b;
        }

        .logo p {
            font-size: 0.75rem;
            color: #64748b;
        }

        .header-actions {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        select, button {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 0.5rem;
            font-size: 0.95rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .lang-select {
            background: #f1f5f9;
            color: #1e293b;
        }

        .btn-primary {
            background: #2563eb;
            color: white;
        }

        .btn-primary:hover {
            background: #1d4ed8;
        }

        .btn-success {
            background: #16a34a;
            color: white;
        }

        .btn-success:hover {
            background: #15803d;
        }

        .btn-danger {
            background: #dc2626;
            color: white;
        }

        .btn-danger:hover {
            background: #b91c1c;
        }

        .user-info {
            display: flex;
            flex-direction: column;
            font-size: 0.9rem;
            text-align: right;
        }

        .user-company {
            font-weight: 600;
            color: #1e293b;
        }

        .user-email {
            font-size: 0.8rem;
            color: #64748b;
        }

        /* Main Container */
        .container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 1rem;
        }

        /* Filter Section */
        .filter-section {
            background: white;
            padding: 1.5rem;
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }

        .filter-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
        }

        .filter-group label {
            font-size: 0.85rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: #475569;
        }

        .filter-group select,
        .filter-group input {
            padding: 0.75rem;
            border: 1px solid #e2e8f0;
            border-radius: 0.375rem;
            font-size: 0.95rem;
        }

        /* Listings Grid */
        .listings-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 1.5rem;
        }

        .listing-card {
            background: white;
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            overflow: hidden;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .listing-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }

        .listing-card.offer {
            border-top: 4px solid #16a34a;
        }

        .listing-card.request {
            border-top: 4px solid #2563eb;
        }

        .listing-header {
            padding: 1rem;
            border-bottom: 1px solid #f1f5f9;
        }

        .listing-badge {
            display: inline-block;
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .listing-badge.offer {
            background: #dcfce7;
            color: #166534;
        }

        .listing-badge.request {
            background: #dbeafe;
            color: #1e40af;
        }

        .listing-title {
            font-size: 1.1rem;
            font-weight: 600;
            color: #1e293b;
            margin: 0.5rem 0;
        }

        .rating {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.9rem;
            color: #64748b;
        }

        .stars {
            color: #fbbf24;
        }

        .listing-body {
            padding: 1rem;
        }

        .listing-info {
            font-size: 0.9rem;
            color: #475569;
            margin-bottom: 0.75rem;
        }

        .listing-info strong {
            color: #1e293b;
        }

        .listing-footer {
            padding: 1rem;
            border-top: 1px solid #f1f5f9;
            display: flex;
            gap: 0.5rem;
        }

        .reveal-btn {
            flex: 1;
            padding: 0.75rem;
            border: none;
            border-radius: 0.375rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .reveal-btn.hidden {
            background: #2563eb;
            color: white;
        }

        .reveal-btn.hidden:hover {
            background: #1d4ed8;
        }

        .reveal-btn.revealed {
            background: #fee2e2;
            color: #991b1b;
        }

        .contact-info {
            margin-top: 1rem;
            padding: 1rem;
            background: #f8fafc;
            border-radius: 0.375rem;
            font-size: 0.9rem;
        }

        .contact-info p {
            margin: 0.5rem 0;
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 2000;
            align-items: center;
            justify-content: center;
        }

        .modal.active {
            display: flex;
        }

        .modal-content {
            background: white;
            padding: 2rem;
            border-radius: 0.5rem;
            max-width: 500px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
        }

        .modal-header {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            color: #1e293b;
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: #475569;
            font-size: 0.9rem;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #e2e8f0;
            border-radius: 0.375rem;
            font-size: 0.95rem;
            font-family: inherit;
        }

        .form-group textarea {
            resize: vertical;
            min-height: 100px;
        }

        .modal-footer {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
            margin-top: 1.5rem;
        }

        .modal-footer button {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 0.375rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        /* Admin Panel */
        .admin-section {
            background: white;
            padding: 1.5rem;
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }

        .admin-section h2 {
            font-size: 1.3rem;
            margin-bottom: 1rem;
            color: #1e293b;
        }

        .admin-listing {
            background: #f8fafc;
            padding: 1rem;
            border-radius: 0.375rem;
            margin-bottom: 1rem;
            border-left: 4px solid #9333ea;
        }

        .admin-listing h3 {
            margin-bottom: 0.5rem;
            color: #1e293b;
        }

        .admin-listing .status {
            display: inline-block;
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.8rem;
            font-weight: 600;
            margin-bottom: 0.75rem;
        }

        .admin-listing .status.pending {
            background: #fef3c7;
            color: #92400e;
        }

        .admin-listing .status.approved {
            background: #dcfce7;
            color: #166534;
        }

        .admin-actions {
            display: flex;
            gap: 0.5rem;
            margin-top: 0.75rem;
        }

        .admin-actions button {
            padding: 0.5rem 1rem;
            font-size: 0.85rem;
            border: none;
            border-radius: 0.375rem;
            cursor: pointer;
            font-weight: 600;
        }

        /* Auth Page */
        .auth-container {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .auth-card {
            background: white;
            padding: 2rem;
            border-radius: 0.5rem;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            max-width: 400px;
            width: 90%;
        }

        .auth-card h1 {
            font-size: 1.8rem;
            margin-bottom: 0.5rem;
            color: #1e293b;
        }

        .auth-card p {
            color: #64748b;
            margin-bottom: 1.5rem;
        }

        .toggle-auth {
            text-align: center;
            margin-top: 1rem;
            font-size: 0.9rem;
            color: #64748b;
        }

        .toggle-auth a {
            color: #2563eb;
            cursor: pointer;
            text-decoration: underline;
        }

        /* Loader */
        .loader {
            text-align: center;
            padding: 2rem;
        }

        .spinner {
            border: 4px solid #f1f5f9;
            border-top: 4px solid #2563eb;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Responsive */
        @media (max-width: 768px) {
            .header-container {
                flex-direction: column;
                gap: 1rem;
            }

            .filter-grid {
                grid-template-columns: 1fr;
            }

            .listings-container {
                grid-template-columns: 1fr;
            }

            .modal-content {
                padding: 1.5rem;
            }
        }
    </style>
</head>
<body>
    <div id="app"></div>

    <script>
        // Supabase Configuration
        const SUPABASE_URL = 'https://rexnshrjlqqiveivsycl.supabase.co';
        const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJleG5zaHJqbHFxaXZlaXZzeWNsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjEyMTUxNTEsImV4cCI6MjA3Njc5MTE1MX0._EW5DUTLgB48i4YhkedoVxNmblFkX6UnZzlScDhhPfg';

        const supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

        // App State
        let appState = {
            session: null,
            listings: [],
            profile: null,
            isAdmin: false,
            filters: {
                type: 'all',
                departureCity: 'all',
                arrivalCity: 'all',
                searchTerm: ''
            },
            currentLanguage: 'en'
        };

        // Translations
        const translations = {
            en: {
                title: 'Algeria Car Pool',
                subtitle: 'Connect • Ship • Consolidate',
                login: 'Login',
                logout: 'Logout',
                register: 'Register',
                createListing: 'Create Listing',
                admin: 'Admin Panel',
                browse: 'Browse Listings',
                offer: 'Offer Space',
                request: 'Request Space',
                filter: 'Filter',
                search: 'Search listings...',
                companyName: 'Company Name',
                contactPerson: 'Contact Person',
                email: 'Email',
                phone: 'Phone Number',
                departureCity: 'Departure City (China)',
                departurePort: 'Port of Loading',
                arrivalCity: 'Arrival City (Algeria)',
                arrivalPort: 'Port of Arrival',
                spotsAvailable: 'Spots Available',
                carTypes: 'Preferred Car Types',
                shippingDate: 'Estimated Shipping Date',
                description: 'Additional Details',
                create: 'Create',
                cancel: 'Cancel',
                approve: 'Approve',
                reject: 'Reject',
                delete: 'Delete',
                revealContact: 'Reveal Contact',
                password: 'Password',
                loginTitle: 'Login / Register',
                dontHaveAccount: "Don't have an account?",
                haveAccount: 'Already have an account?'
            },
            ar: {
                title: 'تجميع السيارات بالجزائر',
                subtitle: 'اتصل • شحن • توحيد',
                login: 'دخول',
                logout: 'خروج',
                register: 'تسجيل',
                createListing: 'إنشاء إعلان',
                admin: 'لوحة الإدارة',
                browse: 'تصفح الإعلانات',
                offer: 'عرض مساحة',
                request: 'طلب مساحة',
                filter: 'تصفية',
                search: 'ابحث...',
                companyName: 'اسم الشركة',
                contactPerson: 'شخص الاتصال',
                email: 'البريد الإلكتروني',
                phone: 'رقم الهاتف',
                departureCity: 'مدينة المغادرة',
                departurePort: 'ميناء الشحن',
                arrivalCity: 'مدينة الوصول',
                arrivalPort: 'ميناء الوصول',
                spotsAvailable: 'المساحات المتاحة',
                carTypes: 'أنواع السيارات',
                shippingDate: 'تاريخ الشحن',
                description: 'التفاصيل الإضافية',
                create: 'إنشاء',
                cancel: 'إلغاء',
                approve: 'موافقة',
                reject: 'رفض',
                delete: 'حذف',
                revealContact: 'كشف المعلومات',
                password: 'كلمة المرور',
                loginTitle: 'دخول / تسجيل',
                dontHaveAccount: 'ليس لديك حساب؟',
                haveAccount: 'هل لديك حساب؟'
            },
            fr: {
                title: 'Pool Automobile Algérie',
                subtitle: 'Connecter • Expédier • Consolider',
                login: 'Connexion',
                logout: 'Déconnexion',
                register: 'Inscription',
                createListing: 'Créer Annonce',
                admin: 'Admin',
                browse: 'Parcourir',
                offer: 'Offrir',
                request: 'Demander',
                filter: 'Filtrer',
                search: 'Rechercher...',
                companyName: 'Nom entreprise',
                contactPerson: 'Personne contact',
                email: 'E-mail',
                phone: 'Téléphone',
                departureCity: 'Ville départ',
                departurePort: 'Port chargement',
                arrivalCity: 'Ville arrivée',
                arrivalPort: 'Port arrivée',
                spotsAvailable: 'Places',
                carTypes: 'Types véhicules',
                shippingDate: 'Date expédition',
                description: 'Détails',
                create: 'Créer',
                cancel: 'Annuler',
                approve: 'Approuver',
                reject: 'Rejeter',
                delete: 'Supprimer',
                revealContact: 'Afficher',
                password: 'Mot de passe',
                loginTitle: 'Connexion',
                dontHaveAccount: "Pas de compte?",
                haveAccount: 'Avez-vous un compte?'
            }
        };

        const t = (key) => translations[appState.currentLanguage][key] || key;

        // China Cities & Algeria Cities
        const chinaCities = ['Guangzhou', 'Shenzhen', 'Shanghai', 'Chongqing', 'Xian'];
        const algeriaCities = ['Algiers', 'Oran', 'Annaba', 'Bejaia'];
        const algeriaPorts = ['Port of Algiers', 'Port of Oran', 'Port of Annaba'];
        const chinaPortse = ['Guangzhou Port', 'Shenzhen Port', 'Shanghai Port'];

        // Initialize App
        function initApp() {
            checkAuth();
            setupEventListeners();
            render();
        }

        // Check Authentication
        async function checkAuth() {
            const { data: { session } } = await supabase.auth.getSession();
            appState.session = session;

            if (session) {
                await fetchProfile();
                await fetchListings();
            }

            supabase.auth.onAuthStateChange(async (event, session) => {
                appState.session = session;
                if (session) {
                    await fetchProfile();
                    await fetchListings();
                }
                render();
            });
        }

        // Fetch Profile
        async function fetchProfile() {
            if (!appState.session) return;

            const { data, error } = await supabase
                .from('profiles')
                .select('*')
                .eq('id', appState.session.user.id)
                .single();

            if (error && error.code !== 'PGRST116') {
                console.error('Error fetching profile:', error);
            } else if (data) {
                appState.profile = data;
                appState.isAdmin = data.is_admin;
            }
        }

        // Fetch Listings
        async function fetchListings() {
            const { data, error } = await supabase
                .from('listings')
                .select(`
                    *,
                    user:user_id(company_name, contact_person, phone)
                `)
                .eq('status', 'approved')
                .order('created_at', { ascending: false });

            if (error) {
                console.error('Error fetching listings:', error);
            } else {
                appState.listings = data || [];
            }
        }

        // Setup Event Listeners
        function setupEventListeners() {
            $(document).on('click', '.logout-btn', logout);
            $(document).on('click', '.create-listing-btn', openCreateModal);
            $(document).on('click', '.close-modal', closeModals);
            $(document).on('click', '.modal', closeModalsOnBackdrop);
            $(document).on('change', '.lang-select', changeLanguage);
            $(document).on('change', '[data-filter]', updateFilters);
            $(document).on('click', '.reveal-btn', revealContact);
            $(document).on('click', '.admin-btn', openAdminPanel);
            $(document).on('click', '.approve-btn', approveListing);
            $(document).on('click', '.reject-btn', rejectListing);
            $(document).on('submit', '#login-form', handleLogin);
            $(document).on('submit', '#create-listing-form', handleCreateListing);
        }

        // Render Main UI
        function render() {
            const $app = $('#app');
            $app.empty();

            if (!appState.session) {
                renderAuthPage();
            } else {
                renderMainPage();
            }
        }

        // Render Auth Page
        function renderAuthPage() {
            const html = `
                <div class="auth-container">
                    <div class="auth-card">
                        <h1>${t('loginTitle')}</h1>
                        <p>${t('subtitle')}</p>
                        <form id="login-form">
                            <div class="form-group">
                                <label>${t('email')}</label>
                                <input type="email" name="email" required>
                            </div>
                            <div class="form-group">
                                <label>${t('companyName')}</label>
                                <input type="text" name="company" required>
                            </div>
                            <div class="form-group">
                                <label>${t('password')}</label>
                                <input type="password" name="password" required>
                            </div>
                            <button type="submit" class="btn-primary" style="width: 100%;">${t('login')}</button>
                        </form>
                    </div>
                </div>
            `;
            $('#app').html(html);
        }

        // Render Main Page
        function renderMainPage() {
            const html = `
                <header>
                    <div class="header-container">
                        <div class="logo">
                            <div class="logo-icon">AC</div>
                            <div>
                                <h1>${t('title')}</h1>
                                <p>${t('subtitle')}</p>
                            </div>
                        </div>
                        <div class="header-actions">
                            <select class="lang-select">
                                <option value="en" ${appState.currentLanguage === 'en' ? 'selected' : ''}>EN</option>
                                <option value="ar" ${appState.currentLanguage === 'ar' ? 'selected' : ''}>AR</option>
                                <option value="fr" ${appState.currentLanguage === 'fr' ? 'selected' : ''}>FR</option>
                            </select>
                            <div class="user-info">
                                <div class="user-company">${appState.profile?.company_name}</div>
                                <div class="user-email">${appState.session?.user.email}</div>
                            </div>
                            ${appState.isAdmin ? '<button class="btn-primary admin-btn">' + t('admin') + '</button>' : ''}
                            <button class="btn-success create-listing-btn">${t('createListing')}</button>
                            <button class="btn-danger logout-btn">${t('logout')}</button>
                        </div>
                    </div>
                </header>

                <div class="container">
                    ${renderFilters()}
                    ${renderListings()}
                </div>

                ${renderCreateListingModal()}
                ${appState.isAdmin ? renderAdminPanel() : ''}
            `;
            $('#app').html(html);
        }

        // Render Filters
        function renderFilters() {
            return `
                <div class="filter-section">
                    <div class="filter-grid">
                        <div class="filter-group">
                            <label>${t('filter')}</label>
                            <select data-filter="type">
                                <option value="all">All</option>
                                <option value="offer">${t('offer')}</option>
                                <option value="request">${t('request')}</option>
                            </select>
                        </div>
                        <div class="filter-group">
                            <label>${t('departureCity')}</label>
                            <select data-filter="departureCity">
                                <option value="all">All</option>
                                ${chinaCities.map(city => `<option value="${city}">${city}</option>`).join('')}
                            </select>
                        </div>
                        <div class="filter-group">
                            <label>${t('arrivalCity')}</label>
                            <select data-filter="arrivalCity">
                                <option value="all">All</option>
                                ${algeriaCities.map(city => `<option value="${city}">${city}</option>`).join('')}
                            </select>
                        </div>
                        <div class="filter-group">
                            <label>${t('search')}</label>
                            <input type="text" data-filter="search" placeholder="${t('search')}">
                        </div>
                    </div>
                </div>
            `;
        }

        // Render Listings
        function renderListings() {
            const filtered = appState.listings.filter(listing => {
                const matchType = appState.filters.type === 'all' || listing.listing_type === appState.filters.type;
                const matchDeparture = appState.filters.departureCity === 'all' || listing.departure_city_china === appState.filters.departureCity;
                const matchArrival = appState.filters.arrivalCity === 'all' || listing.arrival_city_algeria === appState.filters.arrivalCity;
                const matchSearch = appState.filters.searchTerm === '' || listing.user.company_name.toLowerCase().includes(appState.filters.searchTerm.toLowerCase());
                return matchType && matchDeparture && matchArrival && matchSearch;
            });

            if (filtered.length === 0) {
                return `<div class="loader"><p>No listings found</p></div>`;
            }

            return `
                <div class="listings-container">
                    ${filtered.map(listing => `
                        <div class="listing-card ${listing.listing_type}">
                            <div class="listing-header">
                                <span class="listing-badge ${listing.listing_type}">
                                    ${listing.listing_type === 'offer' ? t('offer') : t('request')}
                                </span>
                                <h3 class="listing-title">${listing.user.company_name}</h3>
                                <p class="listing-subtitle">${listing.user.contact_person}</p>
                                <div class="rating">
                                    <span class="stars">★★★★★</span>
                                    <span>4.5 (12)</span>
                                </div>
                            </div>
                            <div class="listing-body">
                                <div class="listing-info"><strong>Route:</strong> ${listing.departure_city_china} → ${listing.arrival_city_algeria}</div>
                                <div class="listing-info"><strong>Ports:</strong> ${listing.port_loading} → ${listing.port_arrival}</div>
                                <div class="listing-info"><strong>Spots:</strong> ${listing.spots_count}</div>
                                <div class="listing-info"><strong>Car Types:</strong> ${listing.car_types}</div>
                                <div class="listing-info"><strong>Date:</strong> ${listing.estimated_shipping_date}</div>
                                ${listing.description ? `<div class="listing-info"><strong>Details:</strong> ${listing.description}</div>` : ''}
                            </div>
                            <div class="listing-footer">
                                <button class="reveal-btn hidden" data-listing-id="${listing.id}">
                                    ${t('revealContact')}
                                </button>
                            </div>
                            <div class="contact-info" style="display: none;" data-contact-id="${listing.id}">
                                <p><strong>Contact:</strong> ${listing.user.contact_person}</p>
                                <p><strong>Phone:</strong> ${listing.user.phone}</p>
                                <p><strong>Email:</strong> ${listing.contact_email}</p>
                            </div>
                        </div>
                    `).join('')}
                </div>
            `;
        }

        // Render Create Listing Modal
        function renderCreateListingModal() {
            return `
                <div class="modal" id="create-listing-modal">
                    <div class="modal-content">
                        <div class="modal-header">${t('createListing')}</div>
                        <form id="create-listing-form">
                            <div class="form-group">
                                <label>${t('listingType')}</label>
                                <select name="type" required>
                                    <option value="offer">${t('offer')}</option>
                                    <option value="request">${t('request')}</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label>${t('departureCity')}</label>
                                <select name="departureCity" required>
                                    <option value="">Select...</option>
                                    ${chinaCities.map(city => `<option value="${city}">${city}</option>`).join('')}
                                </select>
                            </div>
                            <div class="form-group">
                                <label>${t('departurePort')}</label>
                                <select name="departurePort" required>
                                    <option value="">Select...</option>
                                    ${chinaPortse.map(port => `<option value="${port}">${port}</option>`).join('')}
                                </select>
                            </div>
                            <div class="form-group">
                                <label>${t('arrivalCity')}</label>
                                <select name="arrivalCity" required>
                                    <option value="">Select...</option>
                                    ${algeriaCities.map(city => `<option value="${city}">${city}</option>`).join('')}
                                </select>
                            </div>
                            <div class="form-group">
                                <label>${t('arrivalPort')}</label>
                                <select name="arrivalPort" required>
                                    <option value="">Select...</option>
                                    ${algeriaPorts.map(port => `<option value="${port}">${port}</option>`).join('')}
                                </select>
                            </div>
                            <div class="form-group">
                                <label>${t('spotsAvailable')}</label>
                                <input type="number" name="spots" min="1" required>
                            </div>
                            <div class="form-group">
                                <label>${t('shippingDate')}</label>
                                <input type="date" name="shippingDate" required>
                            </div>
                            <div class="form-group">
                                <label>${t('carTypes')}</label>
                                <input type="text" name="carTypes" placeholder="SUVs, Sedans...">
                            </div>
                            <div class="form-group">
                                <label>${t('description')}</label>
                                <textarea name="description" placeholder="Add any additional details..."></textarea>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn-danger close-modal">${t('cancel')}</button>
                                <button type="submit" class="btn-success">${t('create')}</button>
                            </div>
                        </form>
                    </div>
                </div>
            `;
        }

        // Render Admin Panel
        function renderAdminPanel() {
            const pendingListings = appState.listings.filter(l => l.status === 'pending');
            
            return `
                <div class="modal" id="admin-modal">
                    <div class="modal-content" style="max-width: 800px;">
                        <div class="modal-header">${t('admin')}</div>
                        <div class="admin-section">
                            ${pendingListings.length === 0 ? '<p>No pending listings</p>' : ''}
                            ${pendingListings.map(listing => `
                                <div class="admin-listing">
                                    <h3>${listing.user.company_name}</h3>
                                    <span class="status ${listing.status}">${listing.status}</span>
                                    <p><strong>Type:</strong> ${listing.listing_type}</p>
                                    <p><strong>Route:</strong> ${listing.departure_city_china} → ${listing.arrival_city_algeria}</p>
                                    <p><strong>Description:</strong> ${listing.description}</p>
                                    <div class="admin-actions">
                                        <button class="approve-btn" data-id="${listing.id}">${t('approve')}</button>
                                        <button class="reject-btn" data-id="${listing.id}">${t('reject')}</button>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn-danger close-modal">${t('cancel')}</button>
                        </div>
                    </div>
                </div>
            `;
        }

        // Event Handlers
        async function handleLogin(e) {
            e.preventDefault();
            const email = $(this).find('[name="email"]').val();
            const password = $(this).find('[name="password"]').val();
            const company = $(this).find('[name="company"]').val();

            try {
                const { data: { user }, error: signUpError } = await supabase.auth.signUp({
                    email,
                    password,
                });

                if (signUpError && signUpError.message.includes('already registered')) {
                    const { error: signInError } = await supabase.auth.signInWithPassword({
                        email,
                        password,
                    });
                    if (signInError) throw signInError;
                } else if (signUpError) {
                    throw signUpError;
                }

                // Create profile if new user
                if (user) {
                    await supabase.from('profiles').insert({
                        id: user.id,
                        company_name: company,
                        contact_person: company,
                        phone: '0000000000',
                        is_admin: false,
                    }).on('*', () => {});
                }
            } catch (error) {
                alert('Login Error: ' + error.message);
            }
        }

        async function handleCreateListing(e) {
            e.preventDefault();
            
            const formData = {
                listing_type: $(this).find('[name="type"]').val(),
                title: appState.profile?.company_name,
                description: $(this).find('[name="description"]').val(),
                departure_city_china: $(this).find('[name="departureCity"]').val(),
                arrival_city_algeria: $(this).find('[name="arrivalCity"]').val(),
                port_loading: $(this).find('[name="departurePort"]').val(),
                port_arrival: $(this).find('[name="arrivalPort"]').val(),
                spots_count: parseInt($(this).find('[name="spots"]').val()),
                car_types: $(this).find('[name="carTypes"]').val(),
                estimated_shipping_date: $(this).find('[name="shippingDate"]').val(),
                contact_email: appState.session.user.email,
                contact_phone: appState.profile?.phone,
                user_id: appState.session.user.id,
                status: 'pending'
            };

            try {
                const { error } = await supabase
                    .from('listings')
                    .insert([formData]);

                if (error) throw error;

                alert('Listing created successfully!');
                closeModals();
                await fetchListings();
                render();
            } catch (error) {
                alert('Error creating listing: ' + error.message);
            }
        }

        async function approveListing() {
            const listingId = $(this).data('id');
            try {
                const { error } = await supabase
                    .from('listings')
                    .update({ status: 'approved' })
                    .eq('id', listingId);

                if (error) throw error;
                await fetchListings();
                render();
            } catch (error) {
                alert('Error approving listing: ' + error.message);
            }
        }

        async function rejectListing() {
            const listingId = $(this).data('id');
            try {
                const { error } = await supabase
                    .from('listings')
                    .delete()
                    .eq('id', listingId);

                if (error) throw error;
                await fetchListings();
                render();
            } catch (error) {
                alert('Error rejecting listing: ' + error.message);
            }
        }

        function revealContact() {
            const listingId = $(this).data('listing-id');
            const $contact = $(`.contact-info[data-contact-id="${listingId}"]`);
            
            if ($contact.is(':visible')) {
                $contact.hide();
                $(this).removeClass('revealed').addClass('hidden').text(t('revealContact'));
            } else {
                $contact.show();
                $(this).removeClass('hidden').addClass('revealed').text('Hide');
            }
        }

        function updateFilters() {
            const filterType = $(this).data('filter');
            const value = $(this).val();
            
            if (filterType === 'search') {
                appState.filters.searchTerm = value;
            } else {
                appState.filters[filterType] = value;
            }
            
            renderListings();
        }

        function changeLanguage() {
            appState.currentLanguage = $(this).val();
            render();
        }

        function openCreateModal() {
            $('#create-listing-modal').addClass('active');
        }

        function openAdminPanel() {
            $('#admin-modal').addClass('active');
        }

        function closeModals() {
            $('.modal').removeClass('active');
        }

        function closeModalsOnBackdrop(e) {
            if (e.target === this) {
                closeModals();
            }
        }

        async function logout() {
            await supabase.auth.signOut();
            appState.session = null;
            appState.listings = [];
            appState.profile = null;
            render();
        }

        // Start App
        $(document).ready(function() {
            initApp();
        });
    </script>
</body>
</html>
